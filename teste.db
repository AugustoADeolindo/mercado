CREATE TABLE users (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE orders (
    id INTEGER PRIMARY KEY,
    user_id INTEGER NOT NULL,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    status TEXT DEFAULT 'pending' CHECK(status IN ('pending', 'paid', 'shipped', 'canceled')),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE products (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    price NUMERIC NOT NULL
);

CREATE TABLE order_items (
    order_id INTEGER,
    product_id INTEGER,
    quantity INTEGER DEFAULT 1,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
);

INSERT INTO users (name, email) VALUES
('Augusto', 'augusto@example.com'),
('Mikael', 'mikael@example.com'),
('Heliel', 'heliel@example.com');

INSERT INTO products (name, price) VALUES
('Notebook', 4500.00),
('Teclado Mec√¢nico', 350.00),
('Mouse Gamer', 220.00);

INSERT INTO orders (user_id, status) VALUES
(1, 'paid'),     -- Augusto fez um pedido
(2, 'pending'),  -- Mikael fez um pedido
(2, 'canceled'); -- Mikael fez outro pedido

INSERT INTO order_items VALUES
(1, 1, 1), -- Pedido 1: Notebook
(1, 3, 2), -- Pedido 1: 2 Mouses
(2, 2, 1); -- Pedido 2: Teclado